<?php

/**
 * @file
 * Allows users to add ting items to wish list.
 */

module_load_include('inc', 'ding_bookmark', 'ding_bookmark.flag_ding_entity');

/**
 * Implements hook_menu().
 */
function ding_bookmark_menu() {
  $items['user/%user/bookmarks'] = array(
    'title' => 'Bookmarks',
    'title arguments' => array('Bookmarks', 1),
    'page callback' => 'ding_bookmark_user_bookmark_page',
    'page arguments' => array(1),
    'access callback' => 'ding_bookmark_view_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_bookmark.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ding_bookmark_menu_alter(&$items) {
  foreach ($items as $path => $item) {
    if ($path == 'user/%user/bookmarks' || $path == 'user/%pm_arg/bookmarks') {
      $items[$path]['title callback'] = 'ding_bookmark_menu_item_title';
    }
  }
}

/**
 * Implements hook_theme().
 */
function ding_bookmark_theme() {
  return array(
    'ding_bookmark_remove_form' => array(
      'render element' => 'form',
      'file' => 'ding_bookmark.pages.inc',
    ),
  );
}

/**
 * Implements hook_views_default_views_alter().
 *
 * Kill the views for the default bookmarks flag. They clash with our
 * paths. Disabling them doesn't seem to be enough.
 */
function ding_bookmark_views_default_views_alter(&$views) {
  if (!empty($views['flag_bookmarks'])) {
    unset($views['flag_bookmarks']);
  }
  if (!empty($views['flag_bookmarks_tab'])) {
    unset($views['flag_bookmarks_tab']);
  }
}

/**
 * Title callback; Alter title to add count items number.
 *
 * @param $title
 *  Untranslated title.
 * @param $account
 *  User account object, for counting bookmark items.
 */
function ding_bookmark_menu_item_title($title, $account = NULL) {
  global $user;

  if (is_null($account)) {
    $account = $user;
  }

  return t($title) . ' (' . flag_load('bookmark')->get_user_count_number($account->uid) . ')';
}

/**
 * Access callback; Check user access to bookmark.
 */
function ding_bookmark_view_access($account) {
  global $user;
  return $user->uid == $account->uid || $user->uid == 1;
}

/**
 * Bookmark count callback.
 *
 * @param $account
 *  User account object, for counting bookmark items.
 */
function ding_bookmark_count_number($account = NULL) {
  global $user;
  if (is_null($account)) {
    $account = $user;
  }
  return flag_load('bookmark')->get_user_count_number($account->uid);
}


/**
 * Implements hook_flag_definitions().
 */
function ding_bookmark_flag_definitions() {
  return array(
    'ding_entity' => array(
      'title' => t('Ding entities'),
      'description' => '',
      'handler' => 'flag_ding_entity',
    ),
  );
}

/**
 * Implements hook_flag_default_flags().
 */
function ding_bookmark_flag_default_flags() {
  $flags = array();
  // Add flag "Bookmark".
  $flags['bookmark'] = array(
      'content_type' => 'ding_entity',
      'name' => 'bookmark',
      'title' => 'Bookmarks',
      'global' => '0',
      'types' => array(),
      'flag_short' => 'Add to bookmarks',
      'flag_long' => '',
      'flag_message' => 'Added to bookmarks',
      'flagged_already_message' => 'This item is in bookmarks already.',
      'unflag_short' => 'Remove from bookmarks',
      'unflag_long' => '',
      'unflag_message' => 'Removed from bookmarks',
      'unflag_denied_text' => '',
      'link_type' => 'toggle',
      'roles' => array(
        'flag' => array(
          0 => '2',
        ),
        'unflag' => array(
          0 => '2',
        ),
      ),
      'api_version' => 2,
      'locked' => array('name', 'types', 'global', 'link_type', 'roles'),
  );
  return $flags;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_bookmark_form_flag_form_alter(&$form, &$form_state, $form_id) {
  // Remove unnecessary parameters.
  unset($form['display']['link_options_intro'], $form['display']['link_options_confirm']);
}

/**
 * Implements hook_ding_entity_buttons().
 */
function ding_bookmark_ding_entity_buttons($type, $entity) {
  // Add 'bookmark' button.
  if ($type == 'ding_entity') {
    $bookmark_flag_button = ding_bookmark_flag_view($type, $entity);
    return array($bookmark_flag_button);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_bookmark_form_flag_confirm_alter(&$form, &$form_state, $form_id) {
  if ($form['flag_name']['#value'] == 'bookmark') {
    // Flag module does not allow flag/unflag to anonymous users.
    // Custom submit handler will show login popup to user instead of "You are not allowed to flag...".
    $form['#native_submit'] = $form['#submit'];
    $form['#submit'] = array('ding_bookmark_form_flag_confirm_submit');
    $form['actions']['submit']['#id'] = drupal_html_id("bookmark-btn");
    // Implement ajax functionality.
    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'ding_bookmark_flag_confirm_form_callback',
      'wrapper' => 'ding-bookmark-flag-confirm-form',
    );

    // Remove 'cancel' link.
    unset($form['actions']['cancel']);
  }
}

/**
 * Submit handler.
 *
 * Provides login popup for anonymous users, otherwise invoke native handlers
 */
function ding_bookmark_form_flag_confirm_submit($form, &$form_state) {
  global $user;

  // Popup login form.
  if (!$user->uid) {
    //form_set_error($form, 'please login to bookmark');
    //get login form.
        $state = form_state_defaults();
        $elements = drupal_get_form("user_login");
        /*
         * Add a material id hidden input for use later if login succeeds.
         */
        
        unset($elements['name']['#value']);
        unset($elements['pass']['#value']);
        $elements['actions']['submit']['#ajax']['callback'] = "ding_bookmark_flag_confirm_form_callback";
        //unset($elements['actions']['submit']['#ajax_processed']);
        //$elements['actions']['submit'] = ajax_pre_render_element($elements['actions']['submit']);
        $elements['content_id'] = array(
            '#id' => 'content_id',
            '#name' => 'content_id',
            '#type' => 'hidden',
            '#value' => $form['content_id']['#value'],
          );
        $elements['material_id'] = array(
            '#id' => 'material_id',
            '#name' => 'material_id',
            '#type' => 'hidden',
            '#value' => $form['material_id']['#value'],
          );
        if(isset($form['is_carousel']))
        {
            $elements['is_carousel'] = array(
                '#id' => 'is_carousel',
                '#name' => 'is_carousel',
                '#type' => 'hidden',
                '#value' => true,
              );
             
             
        }
        $elements['is_carousel_login'] = array(
                '#id' => 'is_carousel_login',
                '#name' => 'is_carousel_login',
                '#type' => 'hidden',
                '#value' => true,
              );
        form_set_cache($elements['#build_id'], $elements,$state);
        $form_html = render($elements);
        
        $command = isset($form['is_carousel']) ? ajax_command_html('.modal-body',$form_html) : ajax_command_ding_popup('ding_bookmark', t('Huskeliste'), $form_html);
        $commands = array(
          '#type' => 'ajax',
          '#commands' => array(
             $command,
             
          ));
        ajax_deliver($commands);
        drupal_exit();
  }
 if(isset($form['content_id']['#value']))
 {
    $bookmark_flag = flag_get_flag('bookmark');
    $entity_id = $form['content_id']['#value'];

    if ($bookmark_flag->is_flagged($entity_id)) {
      // Generate message for the user.
      $form_state['storage']['response_html'] = t($bookmark_flag->flagged_already_message);
    }
    else {
      // Invoke native submit handlers.
      $was_handled = false;
      foreach ($form['#native_submit'] as $function) {
        if (function_exists($function)) {
            $was_handled = true;
          $function($form, $form_state);
        }
      }
      // Generate message for the user.
        if(!$was_handled)
        {
          $form_state['storage']['response_html'] = t($bookmark_flag->flag_message);
        }
      }
    }
 }


/**
 * Ajax callback.
 */
function ding_bookmark_flag_confirm_form_callback($form, &$form_state) {
  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );

  // Drop messages.
  //theme('status_messages');
  // Get generated message.
  if($form['is_carousel_login'])
  {
    $form['#native_submit'] = ["flag_confirm_submit"];
    ding_bookmark_form_flag_confirm_submit($form,$form_state);
  }
  //drupal_get_messages('status',true);
  drupal_set_message($form_state['storage']['response_html']);
  $html = theme('status_messages');
  
  //$html = '<div class="ding-bookmark-message">' .  . '</div>';
   if(isset($form['is_carousel']))
   {
        $object = ding_entity_load($form['material_id']['#value'], 'ting_object');  
        unset($_POST); // conflicts..
        $render = ting_object_view($object, 'caroussel_modal');
       foreach($render['ding_entity_buttons'][0] as $index => $button)
       {
            $render['ding_entity_buttons'][0][$index]['is_carousel'] = array(
                '#id' => 'is_carousel',
                '#name' => 'is_carousel',
                '#type' => 'hidden',
                '#value' => true,
              );
            form_set_cache($button['#build_id'], $render['ding_entity_buttons'][0][$index],$state);
       }
      $render_result =  render($render);
      $html .= $render_result;
   }
  // Popup.
  //$response['#commands'][] = ajax_command_html('.modal-body', $html);
 
  $top_menu = theme('fynboots_top_menu');
  $response['#commands'][] = ajax_command_replace(".top-menu", $top_menu);
  if(isset($form['is_carousel']) && $form['is_carousel']['#value'] == 1)
  {
    $response['#commands'][] = ajax_command_html('.modal-body', $html);
  }
  else
  {
      $response['#commands'][] = ajax_command_ding_popup('ding_bookmark', t('Huskeliste'), $html);
  }
  //update amount..
  $response['#commands'][] = ajax_command_html('#ding-user-bookmark-amount .amount', '<span>(' . ding_bookmark_count_number() . ')</span>');

  return $response;
}

/**
 * Build 'add to bookmark' button.
 */
function ding_bookmark_flag_view($entity_type, $entity) {
  $bookmark_flag = flag_get_flag('bookmark');

  $ding_entity_info = ding_entity_info($entity_type);
  $entity_info = entity_get_info($ding_entity_info['entity_type']);
  $entity_id = $entity->{$entity_info['entity keys']['id']};

  // Confirm form will change page title.
  // Store native title.
  $page_native_title = drupal_get_title();
  $flag_confirm_form = ding_provider_get_form('flag_confirm', 'flag', $bookmark_flag, $entity_id);
  $flag_confirm_form['material_id'] = array(
            '#id' => 'material_id',
            '#name' => 'material_id',
            '#type' => 'hidden',
            '#value' => $entity->id,
          );
  // Restore title.
  drupal_set_title($page_native_title);

  return $flag_confirm_form;
}

/**
 * Display a bookmark item.
 */
function ding_bookmark_item_view($entity_type, $entity_id) {
  $type_info = ding_entity_info($entity_type);
  $entities = entity_load($type_info['entity_type'], array($entity_id));
  $entity = reset($entities);
  // Library code can be changed at any time by the site administrator.
  // Every time when bookmark item is loaded,
  //  module should check, whether item is available in the current library.
  // If item does not exists in the library it shoul be deleted from bookmark.
  if (!$entity) {
    // Remove item.
    $flag = flag_get_flag('bookmark');
    $flag->flag('unflag', $entity_id);
    return FALSE;
  }

  $build = ding_entity_view($entity, 'user_list');
  return $build;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_bookmark_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ding_bookmark_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

